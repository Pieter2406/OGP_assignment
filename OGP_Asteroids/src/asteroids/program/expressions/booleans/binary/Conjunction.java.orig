package asteroids.program.expressions.booleans.binary;

import asteroids.program.expressions.Expression;
import asteroids.program.expressions.booleans.BinaryComposedBooleanExpression;
import asteroids.program.types.BooleanType;

public class Conjunction extends BinaryComposedBooleanExpression {

	public Conjunction(int line, int column, Expression lhs, Expression rhs) {
		super(line, column,lhs, rhs);
	}

	@Override
	public BooleanType getType() {
		return new BooleanType((boolean) lhs.getType().getValue() && (boolean) rhs.getType().getValue());
	}

	@Override
<<<<<<< HEAD
	public String toString() {
		return "Conjunction [left expression=" + lhs.toString() + ", right expression=" + rhs.toString() + ", outcome value=" + type.toString()
				+ "]";
	}
	
	
=======
	public boolean isTypeCorrect(){
		if (lhs.getType() instanceof BooleanType && rhs.getType() instanceof BooleanType) // for comparisons this method is Overriden.
			return true;
		return false;
	}
	
>>>>>>> 315fd65ee945a7c8fad87c7e1587852d4724348a
}
